Class-based Components & Context
--------------------------------
... context ... you can still define it and provide it as you learned it. <------------- *

user-context.js
---------------
import { createContext } from "react";

const UserContext = createContext({ users: [] });
...

App.js
------
...
return(
  <UserContext.Provider value={usersContext}> <------ Provide it by using the Provider component
    <UserFinder />
  ...

... the only part which changes when you're working with context, is related to how you use it in your class-based components.

... one approach ... the context consumer component can be used in both functional and class-based components. 

UserFinder.js
-------------
...
  render() {
    ...
    <UserContext.Consumer> ... </UserContext.Consumer> <---------- X

... you can only connect a class-based component to one context. <----------- *

UserFinder.js
-------------
...
import UsersContext from "../store/users-context";

class UserFinder extends Component {
  static contextType = UsersContext; <---------- **
  ...
  componentDidMount() {
    this.setState({ filteredUsers: this.context.users });
  }