Avoiding Component Function Executions with memo()
--------------------------------------------------
How can we optimize a React application with that knowledge of how different components are related and are being executed? 
... in this demp app ... we have one use case that could be optimized if you understand how components are executed and are related.

... if I type one character here, ... a bunch of component functions were executed ...
Why is that happening here?

App.jsx
-------
...
<input type="number" onChange={handleChange} value={enteredNumber} />
...

... this input lives directly in the App component ... onChange handler ... on every keystroke I update some state
... when the state changes this CF gets executed again ... all child component functions get executed again. <-------- **

That's why on every keystroke all those component functions get executed again.
... how can we fix the problem?
... two main possible solutions we can go for.

... React gives you a built-in function that you can wrap around your component functions 
that will prevent unnecessary components function executions. <-------------- ** 

Counter.jsx
-----------
import { memo } from "react";
...
const Counter = memo(({ initialCount }) => { <----------------- ... passing your CF as a value to memo.
  ....
  const [counter, setCounter] = useState(initialCount);
  ...
})

export default Counter;

... it will take a look at the props of your CF and whenever the CF would normally execute again, 
memo will take a look at the old prop value and at the new prop value (that would be received now if that CF would execute)
and if those prop values are exactly the same 
(which for arrays and objects means that they really have to be exactly the same array or object in memory)
... this CF execution will be prevented by memo. <------------ ***

... would only be re-executed if initialCount changed or of course if its internal state changed (that's not affected by memo).

memo only prevents function executions that are triggered by the parent component <---------- *

memo() compares prop values <----------- **

Don't overuse memo() 
Use it as high up in the component tree as possible <------------ **
-> Blocking a component execution there will also block all child component executions 

Checking props with memo() costs performance!
-> Don't wrap it around all your components - it will just add a lot of unnecessary checks

Don't use it on components where props will change frequently
-> memo() would just perform a meaningless check in such cases (which costs performance)