useEffect's Cleanup Function, Another Example
---------------------------------------------
... we're not giving the user any hint regarding that timer.
... add a little progress bar in this modal ... showin the user that a timer is running and the place will be removed once the timer expired.

DeleteConfirmation.jsx
----------------------
...
<progress /> <------ can be used to show a progress bar, ... 

... we also need to control the fill status of this progress bar.
... need to manage some kind of state which needs to change rather frequently so that we re-render this JSX code 
and this progress bar pretty frequently.

const [remainingTime, setRemainingTime] = useState(INTERVAL);
...
<progress value={remainingTime} max={TIMER} />

... we got this time expiring, ... expired pretty quickly.

...
setInterval(() => {
  setRemainingTime(prev => prev - INTERVAL)
  }, INTERVAL);

... by setting setInterval right in the component function, ... have the problem 
that we create an inifinite loop ... use useEffect ...

... we had to stop the timer to make sure that once the modal is closed, the timer doesn't keep on going behind the scenes.
... we have to return clean up function, that will be executed by React, ...
... since we have an empty dependencies array, ... when this DeleteConfirmation component unmounts.
... removed from the DOM.

... the cleanup function being needed to avoid ongoing processes behind the scenes ... would cost performance.