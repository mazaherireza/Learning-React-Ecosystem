1. Re-render the component when the state and/or props change
React prepares to render when component states, props, or any event from the listener changes. 
Once scheduled, a render occurs. React will find the best re-render time.

React’s setState method updates the state (hooks use useState). 
The component’s render function will be called, 
and all of its descendant components will re-render regardless of props or state.

2. Change in the value of the Context Store

3. Re-render when change in key prop
A key attribute can affect the rendering of lists. 
Lists can be SectionLists, FlatLists, or lists you have created by iterating over an array.

Do not give a randomly generated value, such as a UUID, for the key, 
as it will change on every render and the diffing mechanism thinks that this is a new element, so trying to re-render every time.

How to prevent unnecessary Re-rendering?

Necessary re-rendering
...  if a component has a TextInput and the user enters text into an input field, 
each onChange event should update the component’s state and re-render it.

Unnecessary re-rendering
...  if a user types in a TextInput and the screen refreshes with each character, 
the parent component will re-render all of its children, which is unnecessary and slows down the app.

React provides two hooks based on memoization to improve performance on re-renders:
useMemo()
useCallback()

These two hooks allow us to reduce re-rendering counts by caching the result and 
then returning the same result if the inputs remain unchanged.

How to trigger Re-rendering?
...
useState is a basic hook for managing simple state transformations, 
and useReducer is an additional hook for managing more complex state logic.

